class TestRunner extends EnigmaticElement{tests={};connectedCallback(){window.testrunner=this}createTests(a){this.tests=a,this.innerHTML=`
            <div style="display:grid; grid-template: 4fr 1fr / 4fr 1fr">
                <e-e id='trdisplay'></e-e>
                <div></div>
                <div>
                  <span id='trstatus'>${this.count()} tests loaded</span>
                  <button style='margin-top: 5px; float: right' onclick='testrunner.run()'>Run</button>
                </div>
             </div>
        `}count(){return Object.keys(this.tests).length}async run(){console.clear();let a,b=!0,c=[],d=+new Date;for(const d in this.tests){let f,g;$("#trstatus").innerHTML=`<i>${d}</i>`;try{a=this.tests[d];const b="AsyncFunction"===a.constructor.name;f=b?await a():a()}catch(a){f=!1,g=a,console.error(a)}f||(this.innerHTML=`Failed on test: ${d} ${g}`,b=!1),c=[...c,{test:d,func:a,success:f}]}const e=$("#trstatus"),f=this.count();e.innerHTML=`${b?"<green>Passed</green>":"<red>Failed</red>"}`,e.innerHTML+=`  ${f} tests in ${+new Date-d}ms`,console[!console.table?"log":"table"](c)}set(a){$("#trstatus").innerHTML=a}}customElements.define("test-runner",TestRunner);